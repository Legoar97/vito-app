// lib/services/vertex_ai_service.dart

import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;
import 'package:googleapis_auth/auth_io.dart';
import '../models/chat_message.dart' as app;

/// Servicio para interactuar con la API de Vertex AI de Google Cloud.
/// Utiliza un modelo de IA (Gemini 1.5 Flash) con un prompt de sistema unificado
/// para gestionar todas las conversaciones de chat de forma contextual y coherente.
class VertexAIService {
  // --- Configuraci√≥n del Servicio ---
  static const String _projectId = 'vito-app-463903';
  static const String _location = 'us-central1';
  static const String _model = 'gemini-2.0-flash-lite';
  static AutoRefreshingAuthClient? _authClient;

  // --- Personalidad Central de Vito (Unificada y Mejorada) ---
  static const String vitoCorePersonaPrompt = '''
  Eres 'Vito', un coach de bienestar integral. Tu nombre viene de "vida". Tu prop√≥sito es ser un gu√≠a emp√°tico, c√°lido y motivador. Te comunicas en espa√±ol de forma natural y cercana.

  TUS PRINCIPIOS DE CONVERSACI√ìN SON:
  1.  **Rol y L√≠mites Claros:** Eres un compa√±ero de h√°bitos y un animador, NO un terapeuta. Si el usuario expresa una crisis de salud mental (pensamientos de autolesi√≥n, etc.), tu √öNICA respuesta debe ser: "Aprecio tu confianza al compartir esto. Suena como un momento muy dif√≠cil, y por eso mismo, lo m√°s importante es que hables con un profesional que pueda darte el apoyo que mereces. Por favor, busca ayuda profesional. No est√°s solo/a en esto."
  2.  **Manejo de Saludos:** Si el usuario te saluda ("Hola", "¬øC√≥mo est√°s?"), responde de forma c√°lida, breve y variada. Inv√≠tale siempre a conversar. Ejemplo: "¬°Hola! Qu√© bueno verte. ¬øQu√© tienes en mente hoy?".
  3.  **Escucha Activa (Venting):** Si el usuario solo se est√° desahogando, tu rol es escuchar. Valida sus sentimientos ("Entiendo que eso sea frustrante", "Suena muy pesado") y haz preguntas abiertas ("¬øQu√© es lo que m√°s te pesa de eso?"). NO intentes solucionar el problema de inmediato.
  4.  **Dar Consejos (Seeking Advice):** Si el usuario pide consejo, basa tus respuestas en la ciencia del comportamiento, pero de forma simple. Promueve los micro-h√°bitos (pasos rid√≠culamente peque√±os) y explica el "porqu√©" de forma sencilla.
  5.  **Memoria y Contexto:** Utiliza el contexto que se te proporciona sobre el usuario de forma sutil para personalizar tus respuestas. NO lo recites. En lugar de "Veo que tu √°nimo hoy es triste", di "Veo que hoy es un d√≠a un poco gris. A veces pasa. Estoy aqu√≠ para escucharte si lo necesitas.".

  Tu tono es siempre paciente y optimista, usando emojis con moderaci√≥n (üå±, ‚ú®, üí™, üòä).
  ''';

  // --- Inicializaci√≥n ---
  static Future<void> initialize() async {
    if (_authClient != null) return;
    try {
      final credentialsJson = await rootBundle.loadString('assets/service-account-key.json');
      final credentials = ServiceAccountCredentials.fromJson(json.decode(credentialsJson));
      _authClient = await clientViaServiceAccount(credentials, ['https://www.googleapis.com/auth/cloud-platform']);
      print('‚úÖ Vertex AI Service inicializado.');
    } catch (e) {
      print('üö® Error inicializando Vertex AI: $e');
      throw Exception('Fall√≥ la inicializaci√≥n de Vertex AI Service: $e');
    }
  }

  // =======================================================================
  // FUNCI√ìN PRINCIPAL PARA EL CHAT CONVERSACIONAL
  // =======================================================================
  static Future<String> getSmartResponse({
    required List<app.ChatMessage> conversationHistory,
    required Map<String, dynamic> userContext,
  }) async {
    final contents = _prepareConversationHistory(conversationHistory);
    // A√±adimos el contexto del usuario al √∫ltimo mensaje para que la IA lo "vea"
    if (contents.isNotEmpty && contents.last['role'] == 'user') {
      final lastUserPrompt = contents.last['parts'][0]['text'];
      final formattedContext = _formatUserContext(userContext);
      contents.last['parts'][0]['text'] = '$formattedContext\n\nConsulta del usuario: "$lastUserPrompt"';
    }
    return _generateContent(vitoCorePersonaPrompt, contents);
  }

  static Future<String> generateUtilityText({
    required String systemPrompt,
    required String userPrompt,
  }) async {
    final contents = [{'role': 'user', 'parts': [{'text': userPrompt}]}];
    // Usamos el motor principal, pero con un systemPrompt personalizado
    return _generateContent(systemPrompt, contents);
  }

  // =======================================================================
  // FUNCIONES SECUNDARIAS (NO SON DE CHAT EN VIVO)
  // =======================================================================

  /// **Analiza texto para crear o modificar un h√°bito (devuelve JSON).**
  static Future<String> parseHabitFromText({
    required String userInput,
    List<Map<String, dynamic>>? conversationHistory,
    Map<String, dynamic>? existingHabitData,
  }) async {
    final systemPrompt = '''
    Eres Vito, un asistente experto en la creaci√≥n y modificaci√≥n de h√°bitos. Tu √∫nica funci√≥n es analizar el texto del usuario y el historial para extraer o modificar los detalles de un h√°bito.
    Tu respuesta DEBE SER SIEMPRE un √∫nico objeto JSON v√°lido, sin texto explicativo adicional.

    ## L√ìGICA DE CONVERSACI√ìN Y RESPUESTA JSON
    1.  **Informaci√≥n Incompleta:** Si faltan datos clave, pregunta de forma amable. Output: `{"status": "incomplete", "question": "¬°Excelente meta! ¬øA qu√© hora te gustar√≠a hacerlo?"}`
    2.  **Eliminaci√≥n:** Si el usuario pide eliminar, responde con `{"status": "delete_confirmation"}`.
    3.  **Completo:** Cuando tengas todos los datos, responde con `{"status": "complete", "data": {...}}`.
    ''';
    final List<Map<String, dynamic>> chatHistory = List.from(conversationHistory ?? []);
    chatHistory.add({
      'role': 'user',
      'parts': [{'text': 'CONTEXTO DEL H√ÅBITO EXISTENTE (si aplica): ${jsonEncode(existingHabitData)}\n\nINPUT DEL USUARIO: "$userInput"'}]
    });
    try {
        return await _generateContent(systemPrompt, chatHistory, forceJsonOutput: true);
    } catch (e) {
        return _getErrorJson("Lo siento, tuve un problema para procesar tu solicitud. ¬øPodemos intentarlo de nuevo?");
    }
  }

  /// **Genera una rutina de 3-4 h√°bitos (devuelve JSON).**
  static Future<String> getRoutine({required String userGoal, required Map<String, dynamic> userContext}) async {
    final systemPrompt = '''
      Eres un experto en bienestar. Tu tarea es crear una rutina de 3 a 4 h√°bitos basada en el objetivo de un usuario.
      Tu respuesta DEBE ser √∫nicamente un objeto JSON v√°lido, sin texto adicional.
      ESTRUCTURA JSON: {"habits": [{"name": "Nombre H√°bito 1", "category": "categoria"}, ...]}
      ''';
    final userContextPrompt = 'Crea una rutina para el siguiente objetivo: "$userGoal".\nContexto del usuario: ${jsonEncode(userContext)}';
    final contents = [{'role': 'user', 'parts': [{'text': userContextPrompt}]}];
    return _generateContent(systemPrompt, contents, forceJsonOutput: true);
  }

  /// **Genera sugerencias de h√°bitos para el onboarding (devuelve JSON).**
  static Future<String> getOnboardingSuggestions(Map<String, dynamic> userProfile) async {
    final systemPrompt = '''
      Eres un experto en bienestar. Analiza el perfil de un nuevo usuario y genera 5 h√°bitos iniciales.
      Tu respuesta DEBE ser √∫nicamente un objeto JSON v√°lido, sin texto adicional.
      ESTRUCTURA JSON: {"habits": [{"name": "Nombre H√°bito 1", "category": "categoria"}, ...]}
      ''';
    final userContextPrompt = 'Analiza el siguiente perfil y genera los h√°bitos:\n${jsonEncode(userProfile)}';
    final contents = [{'role': 'user', 'parts': [{'text': userContextPrompt}]}];
    return _generateContent(systemPrompt, contents, forceJsonOutput: true);
  }

  /// **Resume una conversaci√≥n para guardarla como memoria.**
  static Future<String> summarizeConversation({ required List<app.ChatMessage> conversationHistory }) async {
    final systemPrompt = '''
      Eres un analizador de conversaciones. Tu tarea es leer un chat y crear un resumen muy breve (m√°ximo 2 frases) para que el coach Vito pueda recordarlo en el futuro.
      Enf√≥cate en el estado emocional del usuario, el problema clave y cualquier plan acordado.
      Responde solo con el texto del resumen.
      ''';
    final conversationText = conversationHistory.map((m) => "${m.type == app.MessageType.user ? 'USER' : 'VITO'}: ${m.text}").join('\n\n');
    return _generateContent(systemPrompt, [{'role': 'user', 'parts': [{'text': conversationText}]}]);
  }

  // =======================================================================
  // MOTOR PRINCIPAL DE LA API Y HELPERS PRIVADOS
  // =======================================================================

  static Future<String> _generateContent(String systemPrompt, List<Map<String, dynamic>> contents, {bool forceJsonOutput = false}) async {
    if (_authClient == null) await initialize();
    
    final endpoint = 'https://$_location-aiplatform.googleapis.com/v1/projects/$_projectId/locations/$_location/publishers/google/models/$_model:generateContent';
    
    final requestBody = {
      'systemInstruction': {'parts': [{'text': systemPrompt}]},
      'contents': contents,
      'generationConfig': {
        // MEJORA: Temperatura ajustada a 0.75 para un balance ideal
        // entre creatividad y consistencia para un coach.
        'temperature': 0.75,
        'topP': 0.95,
        'maxOutputTokens': 2048,
        if (forceJsonOutput) 'responseMimeType': 'application/json',
      },
      'safetySettings': [
        {'category': 'HARM_CATEGORY_HARASSMENT', 'threshold': 'BLOCK_MEDIUM_AND_ABOVE'},
        {'category': 'HARM_CATEGORY_HATE_SPEECH', 'threshold': 'BLOCK_MEDIUM_AND_ABOVE'},
        {'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT', 'threshold': 'BLOCK_MEDIUM_AND_ABOVE'},
        {'category': 'HARM_CATEGORY_DANGEROUS_CONTENT', 'threshold': 'BLOCK_MEDIUM_AND_ABOVE'}
      ]
    };

    try {
      final response = await _authClient!.post(
        Uri.parse(endpoint),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(requestBody),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final text = data['candidates']?[0]?['content']?['parts']?[0]?['text'];
        
        // MEJORA: Manejo de respuesta vac√≠a de forma m√°s segura.
        // Devuelve un mensaje amigable en lugar de un JSON de error
        // para no romper las funciones que esperan un string.
        return text ?? "Lo siento, tuve un peque√±o problema al pensar mi respuesta. ¬øPodemos intentarlo de nuevo? üå±";
      }

      print('üö® Error en Vertex AI - Status: ${response.statusCode}, Body: ${response.body}');
      return _getErrorJson('No se recibi√≥ una respuesta v√°lida del servidor (C√≥digo: ${response.statusCode})');
    } catch (e) {
      print('üö® Excepci√≥n al llamar a Vertex AI: $e');
      return _getErrorJson("Lo siento, ocurri√≥ un error al contactar al asistente de IA.");
    }
  }

  static List<Map<String, dynamic>> _prepareConversationHistory(List<app.ChatMessage> history) {
    return history.map((msg) => {
      'role': msg.type == app.MessageType.user ? 'user' : 'model',
      'parts': [{'text': msg.text}]
    }).toList();
  }

  /// MEJORA: Contexto enriquecido para darle al modelo una visi√≥n m√°s completa
  /// del estado actual del usuario, incluyendo el progreso diario.
  static String _formatUserContext(Map<String, dynamic> userContext) {
    if (userContext.isEmpty) return "";
    
    final habitsList = userContext['habits'] as List<dynamic>? ?? [];
    final habitsString = habitsList.isNotEmpty
      ? habitsList.map((h) {
          final streak = h['streak'] > 0 ? " (racha de ${h['streak']} d√≠as)" : "";
          // Re-incorporamos este dato crucial para el contexto
          final completed = h['isCompletedToday'] == true ? " - ¬°Completado hoy! ‚úÖ" : "";
          return "- ${h['name']}${streak}${completed}";
        }).join('\n')
      : "El usuario a√∫n no ha a√±adido h√°bitos.";

    final lastSummary = userContext['lastConversationSummary'] ?? 'Ninguna conversaci√≥n previa.';
    
    // A√±adimos un resumen del progreso diario
    final completedCount = userContext['completedToday'] ?? 0;
    final totalCount = userContext['totalHabits'] ?? habitsList.length;

    return '''
--- CONTEXTO CLAVE DEL USUARIO (para tu conocimiento interno, no lo recites) ---
- Nombre: ${userContext['userName'] ?? 'Usuario'}
- Resumen de la √∫ltima conversaci√≥n: $lastSummary
- Estado de √°nimo hoy: ${userContext['moodToday'] ?? 'No registrado'}
- Progreso de hoy: $completedCount de $totalCount h√°bitos completados.
- H√°bitos actuales:
$habitsString
---
''';
  }

  static String _getErrorJson(String message) {
    return jsonEncode({"status": "error", "message": message});
  }
}