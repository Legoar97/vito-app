import 'dart:convert';
import 'package:googleapis_auth/auth_io.dart';
import 'package:flutter/services.dart' show rootBundle;
import '../models/chat_message.dart';

class VertexAIService {
  static const String _projectId = 'vito-app-463903';
  static const String _location = 'us-central1';
  static const String _model = 'gemini-2.0-flash-lite'; 
  
  static AutoRefreshingAuthClient? _authClient;

  // El m√©todo de inicializaci√≥n no cambia
  static Future<void> initialize() async {
    try {
      final credentialsJson = await rootBundle.loadString('assets/service-account-key.json');
      final credentials = ServiceAccountCredentials.fromJson(json.decode(credentialsJson));
      final scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      _authClient = await clientViaServiceAccount(credentials, scopes);
      print('Vertex AI initialized successfully');
    } catch (e) {
      print('Error initializing Vertex AI: $e');
      throw Exception('Failed to initialize Vertex AI Service: $e');
    }
  }

  static Future<String> getHabitAdvice({
    required List<ChatMessage> conversationHistory,
    required Map<String, dynamic> userContext,
  }) async {
    try {
      if (_authClient == null) {
        await initialize();
      }

      final endpoint = 'https://$_location-aiplatform.googleapis.com/v1/projects/$_projectId/locations/$_location/publishers/google/models/$_model:generateContent';

      // Instrucci√≥n del sistema para guiar a la IA
      final systemPrompt = '''
      Eres Vito, un coach de bienestar y h√°bitos especializado en mindfulness, salud mental, autocuidado y calidad de vida. Tu enfoque principal es ayudar a las personas a desarrollar h√°bitos conscientes y sostenibles que mejoren su d√≠a a d√≠a. No das consejos gen√©ricos ni abarcas temas fuera de esta √°rea (como negocios, tecnolog√≠a o relaciones complejas), a menos que est√©n directamente relacionados con el bienestar personal.

      üéØ TU ROL:
      Eres un gu√≠a amable, motivador y directo al grano. Escuchas activamente, haces preguntas poderosas y ofreces respuestas pr√°cticas, breves y emp√°ticas. Usas emojis de forma natural para hacer las respuestas m√°s c√°lidas y atractivas üòä‚ú®.

      üå± EJES PRINCIPALES:
      1. Mindfulness y meditaci√≥n üßò
      2. H√°bitos saludables y sostenibles ü™¥
      3. Manejo del estr√©s y emociones üòå
      4. Rutinas de autocuidado üõÅ
      5. Sue√±o y descanso üí§
      6. Prop√≥sito y enfoque diario üéØ

      üìå REGLAS CLAVE:
      1. Siempre mant√©n el contexto de la conversaci√≥n actual.
      2. Usa el contexto del usuario que te proporciono, pero NO inventes informaci√≥n.
      3. Si el usuario no tiene h√°bitos a√∫n (`habits: []`) y te pide crear un plan, NO asumas un h√°bito. Pregunta cu√°l le gustar√≠a trabajar, por ejemplo:  
        üëâ ‚Äú¬°Perfecto! ¬øSobre qu√© h√°bito te gustar√≠a que creemos un plan? üìù‚Äù
      4. Si el usuario menciona estar abrumado, estresado o perdido, prioriza sugerencias suaves y conscientes, no planes exigentes.
      5. Si el usuario cambia de idioma, responde autom√°ticamente en ese idioma.
      6. S√© positivo y alentador, pero no exageres ni uses frases vac√≠as. S√© aut√©ntico.

      üß† EJEMPLO DE RESPUESTAS:
      - ‚Äú¬°Claro! Empezar con solo 5 minutos al d√≠a es una gran forma de incorporar la meditaci√≥n üßò. ¬øTe gustar√≠a que te recuerde una hora para hacerlo?‚Äù
      - ‚ÄúSi est√°s buscando m√°s calma en tu d√≠a, podr√≠as comenzar con respiraciones conscientes despu√©s de despertar üåÖ. ¬øTe gustar√≠a una rutina simple para eso?‚Äù

      Tu misi√≥n es ayudar a los usuarios a reconectar con ellos mismos a trav√©s de peque√±os cambios diarios üí´.
      ''';


      // Transforma el historial de la app al formato que espera la API de Gemini
      final contents = conversationHistory.map((msg) {
        if (msg.text.contains("Hola! Soy Vito")) {
          return null;
        }
        // Se define expl√≠citamente el tipo del Map para mayor seguridad
        return <String, dynamic>{
          'role': msg.isUser ? 'user' : 'model',
          'parts': <Map<String, String>>[{'text': msg.text}]
        };
      }).whereType<Map<String, dynamic>>().toList(); // Filtra nulos y asegura el tipo

      // <<<--- BLOQUE CORREGIDO PARA EVITAR ERRORES DE TIPO --- >>>
      // Inyecta el contexto del usuario en el √∫ltimo mensaje para que siempre est√© actualizado
      if (contents.isNotEmpty) {
        // Se trabaja con una copia tipada para evitar errores
        final Map<String, dynamic> lastContent = contents.last;

        if (lastContent['role'] == 'user') {
          // Se accede a los datos de forma segura con conversiones de tipo (casting)
          final List<dynamic> parts = lastContent['parts'] as List<dynamic>;
          final Map<String, dynamic> firstPart = parts.first as Map<String, dynamic>;
          final String lastUserPrompt = firstPart['text'] as String;

          String contextString = '''
---
Contexto Actual del Usuario (NO lo menciones a menos que sea relevante):
- H√°bitos: ${userContext['habits']}
- Tasa de completaci√≥n hoy: ${userContext['completionRate']}%
- Racha m√°s alta: ${userContext['streak']} d√≠as
- Categor√≠as de enfoque: ${userContext['categories']}
---
''';
          // Reemplaza el texto del √∫ltimo mensaje para a√±adir el contexto
          firstPart['text'] = "$contextString\n\nConsulta del Usuario: $lastUserPrompt";
        }
      }

      final requestBody = {
        'systemInstruction': {
          'parts': [{'text': systemPrompt}]
        },
        'contents': contents,
        'generationConfig': {
          'temperature': 0.8,
          'topK': 40,
          'topP': 0.95,
          'maxOutputTokens': 1024,
        },
        'safetySettings': [
          {'category': 'HARM_CATEGORY_HARASSMENT', 'threshold': 'BLOCK_MEDIUM_AND_ABOVE'},
          {'category': 'HARM_CATEGORY_HATE_SPEECH', 'threshold': 'BLOCK_MEDIUM_AND_ABOVE'},
          {'category': 'HARM_CATEGORY_SEXUALLY_EXPLICIT', 'threshold': 'BLOCK_MEDIUM_AND_ABOVE'},
          {'category': 'HARM_CATEGORY_DANGEROUS_CONTENT', 'threshold': 'BLOCK_MEDIUM_AND_ABOVE'}
        ]
      };

      final response = await _authClient!.post(
        Uri.parse(endpoint),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(requestBody),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['candidates'] != null && data['candidates'].isNotEmpty) {
          final content = data['candidates'][0]['content'];
          if (content != null && content['parts'] != null && content['parts'].isNotEmpty) {
            return content['parts'][0]['text'] ?? "No se pudo obtener una respuesta del asistente.";
          }
        }
      }
      
      print('Vertex AI response status: ${response.statusCode}');
      print('Response body: ${response.body}');
      
      return "Error: No se recibi√≥ una respuesta v√°lida del servidor (C√≥digo: ${response.statusCode}).";
    } catch (e) {
      print('Error calling Vertex AI: $e');
      return "Lo siento, ocurri√≥ un error al contactar al asistente de IA. Por favor, intenta nuevamente.";
    }
  }
}
